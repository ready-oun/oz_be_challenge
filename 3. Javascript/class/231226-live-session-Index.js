/* 함수 선언식
function sampleFunction1() {}
// 함수 표현식 이거는 거의 안 씀
const sampleFunction2 = function () {};

//arrow로 더 간단하게
const sampleFunction3 = () => {};


// Python 함수 선언식
def someFunction:
    print("Hello World")

// Python 람다lambda라는 함수를 간단하게 선언하는 방법. 일회적으로 사용할 함수
x = lambda a: a + 10

*/

/* 함수명을 쓰는 것과 
함수를 호출하는 것

이 두 가지를 자꾸 헷갈려하는 경우가 많다.

console.log(sampleFunction1) //함수의 형태와 내용 등에 관해서 출력

sampleFunction() // 함수를 호출하는 것

함수를 그냥 적는 게 아니라 호출해야만 실행된다 !!! 

// 함수는 일종의 코드 뭉치(block) ! 
함수(코드 뭉치)를 왜 만들까? 
ㄴ[개발면접] 1. 가장 기본ㄴ적인 목적은 "재사용"을 위해서! 
2. 상황에 맞는 인자와 함께 코드를 실행하기 위해서. 

매개변수(parameter)
함수를 선언하거나 표현할 때 괄호 안에 난 뭘 받을 거야 라고 미리 써놓는 변수들을 매개변수라고 부른다.

함수를 사용할 때, 매개변수로 사용할 수 있도록 넣어주는 값, 그 자체를 "인수(arguments)"라고 부른다.
params or args 라고 줄여부른다.
kwargs == keyword arguments 

매개변수와 인자를 헷갈리지 않아야 
*/

// 로그를 찍는 건 뭐고, 반환을 찍는 건 뭐지?
console.log(3); // >> console 로그 창 같은 곳에 3이 찍힘

function return3() {
  return 3;
} // > 3이 나오긴 하는데 ,, 콘솔 터미널 같은 건 일종의 출력장치임. 보는 사람이 있는 환경에서 그 사람을 위해서 데이터를 보여주기 위한 것임. Js에서 콘솔, 파이썬에선 스크립트
// return이란 건 사람을 위한 게 아니라 프로그램을 위한 것. 계속 연결해서 데이터가 왔다갔다 해야 하는데 데이터으 ㅣ흐름 중 받는 게 있고 내보내는 게 있는데, 리턴이 그중 내보내는 거다.
// undefined 는 돌려준 값이 없다라는 의미.

function sum(a, b) {
  return a + b;
}
const result = sum(1, 2);

console.log(result); // 3이 콘솔 창에 찍힌다.

function sum(a, b) {
  console.log(1, 2); // 아무 것도 돌려주지 않았음
}

const result = undefined;
console.log(undefined); // 3이 아니라 Undefined 가 찍힌다.


// 백엔드 개발자(특히 파이썬)로서 알아야 할 내용은... 
// 1. 함수는 변수에 담을 수 있다. => 파이썬의 람다를 생각하자 ! 
// 2. 함수는 다른 함수에 인자로 보내질 수 있다. Ex. 화살표 함수 혹은 표현식 => 함수 일급시민(first class)

// 어떤 언어는 함수를 변수에 담을 수 없고, 또는 함수를 다른 함수으 ㅣ인자로 넣을 수도 없다. 하지만 파이썬은 함수를 1급 시민으로 취급하기 때문에 다른 함수으 ㅣ인자로 함수를 넣을 수 있따. 

// 파이썬 
hello = lambda x: x + 3 
// 여기서 헬로는 변수, lambda 키워드 뒤부터가 함수. 

// 함수 일급시민 

let vs. const 

/* 
js가 맨처음 탄생 시, let과 const 가 없었고, var 라는 변수 선언 키워드만 있었다.

협업하다가 바뀌면 안 되는 값이 바뀌는 문제가 있어서
이후에 자스가 발전하는 과정에서 let과 const라는 키워드가 추가되었음.
오늘날의 자스를 쓸 때는 원칙적으로 Var를 쓰지 않음. 

let: 변수 선언 키워드
const: 상수 선언 키워드 

변수를 좀 더 포괄저긍로 표현한다면 -> 메모리에 어떤 값을 담아두는 그릇? 
좁은 으미ㅣ로 변수와 상수를 구분하면
메모리에 값을 담아두기는 하는데, 그 값을 이후에 바꿀 수 있는 그릇이면 -> 변수
없는 그릇이면 -> 상수 

*/